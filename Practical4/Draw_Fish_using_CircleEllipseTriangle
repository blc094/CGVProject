namespace p43 {
	void main() {
		glClearColor(0.0, 0.0, 0.0, 0.0);
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		gluOrtho2D(0.0, 640.0, 0.0, 480.0);
	}

	void MidPointEllipse(float rx, float ry, float xc, float yc) {
		float dx, dy, d1, d2, x, y;
		x = 0;
		y = ry;

		//Initial decision parameter of region 1
		d1 = (ry * rx) - (rx * rx * ry) + (0.25 * rx * rx);
		dx = 2 * ry * ry * x;
		dy = 2 * rx * rx * y;

		//for region 1
		while (dx < dy)
		{
			// Print points based in 4-way symmetry
			printf("(%f, %f)\n", x + xc, y + yc);
			printf("(%f, %f)\n", -x + xc, y + yc);
			printf("(%f, %f)\n", x + xc, -y + yc);
			printf("(%f, %f)\n", -x + xc, -y + yc);

			// Checking  and updating value of decision parameter based on algorithm
			if (d1 < 0)
			{
				x++;
				dx = dx + (2 * ry * ry);
				d1 = d1 + dx + (ry * ry);
			}
			else
			{
				x++;
				y--;
				dx = dx + (2 * ry * ry);
				dy = dy - (2 * rx * rx);
				d1 = d1 + dx - dy + (ry * ry);
			}

			glBegin(GL_POINTS);
			glVertex2i(xc + x, yc + y);
			glVertex2i(xc - x, yc + y);
			glVertex2i(xc + x, yc - y);
			glVertex2i(xc - x, yc - y);
			glEnd();
		}

		// Decision parameter of region 2
		d2 = ((ry * ry) * ((x + 0.5) * (x + 0.5))) + ((rx * rx) * ((y - 1) * (y - 1))) - (rx * rx * ry * ry);

		// Plotting points of region 2
		while (y >= 0) {
			//Printing points based on 4 way symmetry
			printf("(%f, %f)\n", x + xc, y + yc);
			printf("(%f, %f)\n", -x + xc, y + yc);
			printf("(%f, %f)\n", x + xc, -y + yc);
			printf("(%f, %f)\n", -x + xc, -y + yc);

			//Checking and updating parameter value based on algorithm
			if (d2 > 0)
			{
				y--;
				dy = dy - (2 * rx * rx);
				d2 = d2 + (rx * rx) - dy;
			}
			else
			{
				y--;
				x++;
				dx = dx + (2 * ry * ry);
				dy = dy - (2 * rx * rx);
				d2 = d2 + dx - dy + (rx * ry);
			}
			glBegin(GL_POINTS);
			glVertex2i(xc + x, yc + y);
			glVertex2i(xc - x, yc + y);
			glVertex2i(xc + x, yc - y);
			glVertex2i(xc - x, yc - y);
			glEnd();
		}
	}

	void Triangle() {
		glBegin(GL_LINES);
		glVertex2i(250, 150);
		glVertex2i(300, 100);
		glVertex2i(300, 100);
		glVertex2i(300, 200);
		glVertex2i(300, 200);
		glVertex2i(250, 150);
		glEnd();
	}

	void Circle() {
		int xCenter = 90;
		int yCenter = 170;
		int radius = 10;
		int x = 0;
		int y = radius;
		int p = 1 - radius;

		while (x < y)
		{
			x++;
			if (p < 0)
			{
				p += 2 * x + 1;
			}
			else
			{
				y--;
				p += 2 * (x - y) + 1;
			}
			glBegin(GL_POINTS);
			glVertex2i(xCenter + x, yCenter + y);
			glVertex2i(xCenter - x, yCenter + y);
			glVertex2i(xCenter + x, yCenter - y);
			glVertex2i(xCenter - x, yCenter - y);

			glVertex2i(xCenter + y, yCenter + x);
			glVertex2i(xCenter - y, yCenter + x);
			glVertex2i(xCenter + y, yCenter - x);
			glVertex2i(xCenter - y, yCenter - x);
			glEnd();
		}
	}

	void display() {
		glClear(GL_COLOR_BUFFER_BIT);
		glPointSize(2.0);
		glLineWidth(3.0);
		MidPointEllipse(100.0, 50, 150.0, 150.0);
		Triangle();
		Circle();
		glFlush();
	}

	// Driver Code
	void main(int argc, char** argv) {
		glutInit(&argc, argv);
		glutInitWindowSize(640, 480);
		glutInitWindowPosition(10, 10);
		glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
		glutCreateWindow("19012011094_Bhanwar_4.3");
		main();
		glutDisplayFunc(display);
		glutMainLoop();
	}
}

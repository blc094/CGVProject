namespace p45 {
	void main(void) {
		glClearColor(0.0, 0.0, 0.0, 0.0);
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		gluOrtho2D(-980.0, 980.0, -540.0, 540.0);
	}

	//House 
	void setPixel(double x, double y) {
		glBegin(GL_POINTS);
		glVertex2d(x, y);
		glEnd();
	}

	void lineDDA(GLdouble X1, GLdouble Y1, GLdouble X2, GLdouble Y2) {
		GLdouble dx = X2 - X1, dy = Y2 - Y1, steps;
		float xInc, yInc, x = X1, y = Y1;
		steps = (fabs(dx) > fabs(dy)) ? fabs(dx) : fabs(dy);
		xInc = dx / (float)steps;
		yInc = dy / (float)steps;
		setPixel(x, y);
		for (int k = 0; k < steps; k++)
		{
			x += xInc;
			y += yInc;
			setPixel(x, y);
		}
	}

	void house() {
		glClear(GL_COLOR_BUFFER_BIT);
		glColor3f(1.0, 0.0, 0.0);
		lineDDA(-210 * 3, 250, -210 * 3, -200 * 2);
		lineDDA(-210 * 3, 250, -280, 250);
		lineDDA(-210 * 3, -200 * 2, -280, -200 * 2);
		lineDDA(-280, 250, -280, -200 * 2);

		lineDDA(-445, 500, -280, 250);
		lineDDA(-210*3, 250, -445, 500);

		lineDDA(400, 500, -445, 500);
		lineDDA(500, 250, -285, 250);
		lineDDA(400, 500, 500, 250);

		lineDDA(500, -200*2, 500, 250);
		lineDDA(500, -200*2, -280, -400);

		lineDDA(-180 * 3, -200, -370, -200);
		lineDDA(-180 * 3, -200 * 2, -180 * 3, -200);
		lineDDA(-370, -200 * 2, -370, -200);
		glFlush();
	}

	// Fish
	void MidPointEllipse(float rx, float ry, float xc, float yc) {
		glColor3f(1.0, 0.0, 0.3);

		float dx, dy, d1, d2, x, y;
		x = 0;
		y = ry;

		//Initial decision parameter of region 1
		d1 = (ry * rx) - (rx * rx * ry) + (0.25 * rx * rx);
		dx = 2 * ry * ry * x;
		dy = 2 * rx * rx * y;

		//for region 1
		while (dx < dy)
		{
			// Print points based in 4-way symmetry
			printf("(%f, %f)\n", x + xc, y + yc);
			printf("(%f, %f)\n", -x + xc, y + yc);
			printf("(%f, %f)\n", x + xc, -y + yc);
			printf("(%f, %f)\n", -x + xc, -y + yc);

			// Checking  and updating value of decision parameter based on algorithm
			if (d1 < 0)
			{
				x++;
				dx = dx + (2 * ry * ry);
				d1 = d1 + dx + (ry * ry);
			}
			else
			{
				x++;
				y--;
				dx = dx + (2 * ry * ry);
				dy = dy - (2 * rx * rx);
				d1 = d1 + dx - dy + (ry * ry);
			}

			glBegin(GL_POINTS);
			glVertex2i(xc + x, yc + y);
			glVertex2i(xc - x, yc + y);
			glVertex2i(xc + x, yc - y);
			glVertex2i(xc - x, yc - y);
			glEnd();
		}

		// Decision parameter of region 2
		d2 = ((ry * ry) * ((x + 0.5) * (x + 0.5))) + ((rx * rx) * ((y - 1) * (y - 1))) - (rx * rx * ry * ry);

		// Plotting points of region 2
		while (y >= 0) {
			//Printing points based on 4 way symmetry
			printf("(%f, %f)\n", x + xc, y + yc);
			printf("(%f, %f)\n", -x + xc, y + yc);
			printf("(%f, %f)\n", x + xc, -y + yc);
			printf("(%f, %f)\n", -x + xc, -y + yc);

			//Checking and updating parameter value based on algorithm
			if (d2 > 0)
			{
				y--;
				dy = dy - (2 * rx * rx);
				d2 = d2 + (rx * rx) - dy;
			}
			else
			{
				y--;
				x++;
				dx = dx + (2 * ry * ry);
				dy = dy - (2 * rx * rx);
				d2 = d2 + dx - dy + (rx * ry);
			}
			glBegin(GL_POINTS);
			glVertex2i(xc + x, yc + y);
			glVertex2i(xc - x, yc + y);
			glVertex2i(xc + x, yc - y);
			glVertex2i(xc - x, yc - y);
			glEnd();
		}
	}

	void Triangle() {
		glBegin(GL_LINES);
		glVertex2i(250 - 650, 150);
		glVertex2i(300 - 650, 100);
		glVertex2i(300 - 650, 100);
		glVertex2i(300 - 650, 200);
		glVertex2i(300 - 650, 200);
		glVertex2i(250 - 650, 150);
		glEnd();
	}

	void eye() {
		int xCenter = 90 - 650;
		int yCenter = 170;
		int radius = 10;
		int x = 0;
		int y = radius;
		int p = 1 - radius;
		while (x < y)
		{
			x++;
			if (p < 0)
			{
				p += 2 * x + 1;
			}
			else
			{
				y--;
				p += 2 * (x - y) + 1;
			}

			glBegin(GL_POINTS);
			glVertex2i(xCenter + x, yCenter + y);
			glVertex2i(xCenter - x, yCenter + y);
			glVertex2i(xCenter + x, yCenter - y);
			glVertex2i(xCenter - x, yCenter - y);

			glVertex2i(xCenter + y, yCenter + x);
			glVertex2i(xCenter - y, yCenter + x);
			glVertex2i(xCenter + y, yCenter - x);
			glVertex2i(xCenter - y, yCenter - x);
			glEnd();
		}
	}

	// Kite
	void Kite() {
		glColor3f(0, 0.7, 0);
		lineDDA(210 - 250, 300 + 150, 250 - 250, 210 + 150);
		lineDDA(250 - 250, 210 + 150, 290 - 250, 300 + 150);
		lineDDA(250 - 250, 335 + 150, 250 - 250, 210 + 150);
		lineDDA(210 - 250, 300 + 150, 290 - 250, 300 + 150);
		lineDDA(210 - 250, 300 + 150, 250 - 250, 335 + 150);
		lineDDA(250 - 250, 335 + 150, 290 - 250, 300 + 150);
		lineDDA(250 - 250, 210 + 150, 240 - 250, 190 + 150);
		lineDDA(250 - 250, 210 + 150, 260 - 250, 190 + 150);
		lineDDA(240 - 250, 190 + 150, 260 - 250, 190 + 150);
		lineDDA(250 - 250, 190 + 150, 270 - 250, 175 + 150);
		lineDDA(230 - 250, 160 + 150, 270 - 250, 175 + 150);
		lineDDA(230 - 250, 160 + 150, 270 - 250, 140 + 150);
		lineDDA(220 - 250, 130 + 150, 270 - 250, 140 + 150);
		glFlush();
	}

	// Star
	void circle()
	{
		int xCenter = 0;
		int yCenter = 0;
		int radius = 150;
		glColor3f(0.0, 1.0, 0.0);
		int x = 0;
		int y = radius;
		int p = 1 - radius;
		while (x < y)
		{
			x++;
			if (p < 0)
			{
				p += 2 * x + 1;
			}
			else
			{
				y--;
				p += 2 * (x - y) + 1;
			}
			glBegin(GL_POINTS);
			glVertex2i(xCenter + x, yCenter + y);
			glVertex2i(xCenter - x, yCenter + y);
			glVertex2i(xCenter + x, yCenter - y);
			glVertex2i(xCenter - x, yCenter - y);

			glVertex2i(xCenter + y, yCenter + x);
			glVertex2i(xCenter - y, yCenter + x);
			glVertex2i(xCenter + y, yCenter - x);
			glVertex2i(xCenter - y, yCenter - x);
			glEnd();
		}
	}
	void innercircle()
	{
		int xCenter = 0;
		int yCenter = 0;
		int radius = 45;
		glColor3f(0.0, 1.0, 0.0);
		int x = 0;
		int y = radius;
		int p = 1 - radius;
		while (x < y)
		{
			x++;
			if (p < 0)
			{
				p += 2 * x + 1;
			}
			else
			{
				y--;
				p += 2 * (x - y) + 1;
			}
			glBegin(GL_POINTS);
			glVertex2i(xCenter + x, yCenter + y);
			glVertex2i(xCenter - x, yCenter + y);
			glVertex2i(xCenter + x, yCenter - y);
			glVertex2i(xCenter - x, yCenter - y);

			glVertex2i(xCenter + y, yCenter + x);
			glVertex2i(xCenter - y, yCenter + x);
			glVertex2i(xCenter + y, yCenter - x);
			glVertex2i(xCenter - y, yCenter - x);
			glEnd();
		}
	}
	void edgecircle(int a, int b)
	{
		int xCenter = a;
		int yCenter = b;
		int radius = 82;
		glColor3f(1.0, 0.0, 1.0);
		int x = 0;
		int y = radius;
		int p = 1 - radius;
		while (x < y)
		{
			x++;
			if (p < 0)
			{
				p += 2 * x + 1;
			}
			else
			{
				y--;
				p += 2 * (x - y) + 1;
			}
			glBegin(GL_POINTS);
			glVertex2i(xCenter + x, yCenter + y);
			glVertex2i(xCenter - x, yCenter + y);
			glVertex2i(xCenter + x, yCenter - y);
			glVertex2i(xCenter - x, yCenter - y);

			glVertex2i(xCenter + y, yCenter + x);
			glVertex2i(xCenter - y, yCenter + x);
			glVertex2i(xCenter + y, yCenter - x);
			glVertex2i(xCenter - y, yCenter - x);
			glEnd();
		}
	}
	void star()
	{
		glColor3f(1.0, 1.0, 0.0);
		glLineWidth(3);
		glBegin(GL_LINES);
		glVertex2i(000, 150);
		glVertex2i(88.25, -121.295);
		glVertex2i(88.25, -121.295);
		glVertex2i(-142.65, 46.35);
		glVertex2i(-142.65, 46.35);
		glVertex2i(142.65, 46.35);
		glVertex2i(142.65, 46.35);
		glVertex2i(-88.25, -121.295);
		glVertex2i(-88.25, -121.295);
		glVertex2i(000, 150);
		glEnd();
	}
	void display()
	{
		glClear(GL_COLOR_BUFFER_BIT);
		glColor3f(1.0, 1.0, 0.0);
		glPointSize(2.0);
		glLineWidth(1.0);
		house();
		Kite();
		circle();
		star();
		innercircle();
		edgecircle(0, 150);
		edgecircle(88.25, -121.295);
		edgecircle(-121.295, 40);
		edgecircle(121.295, 40);
		edgecircle(-88.25, -121.295);
		MidPointEllipse(100.0, 50, 150.0 - 650, 150.0);
		Triangle();
		eye();
		glFlush();
	}
	void main(int argc, char** argv)
	{
		glutInit(&argc, argv);
		glutInitWindowSize(980.0, 540.0);
		glutInitWindowPosition(10, 10);
		glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
		glutCreateWindow("19012011094_Bhanwar_4.5");
		main();
		glutDisplayFunc(display);
		glutMainLoop();
	}
}

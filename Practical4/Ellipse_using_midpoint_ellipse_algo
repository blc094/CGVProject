namespace p42 {
	void MidPointEllipse(int rx, int ry, int Xc, int Yc)
	{
		float dx, dy, d1, d2, x, y;
		x = 0;
		y = ry;

		// Initial decision parameter of region 1
		d1 = (ry * ry) - (rx * rx * ry) + (0.25 * rx * rx);
		dx = 2 * ry * ry * x;
		dy = 2 * rx * rx * y;
		glClearColor(1.0, 1.0, 1.0, 1.0);
		glClear(GL_COLOR_BUFFER_BIT);
		glColor3f(1.0, 0.0, 0.0);
		glPointSize(1.0);
		glBegin(GL_POINTS);

		// For region 1
		while (dx < dy)
		{
			// Print points based on 4-way symmetry
			glVertex2i(Xc + x, Yc + y);
			glVertex2i(Xc - x, Yc + y);
			glVertex2i(Xc + x, Yc - y);
			glVertex2i(Xc - x, Yc - y);

			// Checking and updating value of decision parameter based on algorithm
			if (d1 < 0)
			{
				x++;
				dx = dx + (2 * ry * ry);
				d1 = d1 + dx + (ry * ry);
			}
			else
			{
				x++;
				y--;
				dx = dx + (2 * ry * ry);
				dy = dy - (2 * rx * rx);
				d1 = d1 + dx - dy + (ry * ry);
			}
		}

		// Decision parameter of region 2
		d2 = ((ry * ry) * ((x + 0.5) * (x + 0.5))) + ((rx * rx) * ((y - 1) * (y - 1))) - (rx * rx * ry * ry);

		// Plotting points on region 2
		while (y >= 0)
		{
			// Print points based on 4-way symmetry
			glVertex2i(Xc + x, Yc + y);
			glVertex2i(Xc - x, Yc + y);
			glVertex2i(Xc + x, Yc - y);
			glVertex2i(Xc - x, Yc - y);

			// Checking and updating parameter value based on algorithm
			if (d2 > 0)
			{
				y--;
				dy = dy - (2 * rx * rx);
				d2 = d2 + (rx * rx) - dy;
			}
			else
			{
				y--;
				x++;
				dx = dx + (2 * ry * ry);
				dy = dy - (2 * rx * rx);
				d2 = d2 + dx - dy + (rx * rx);
			}
		}
		glEnd();
		glFlush();
	}
	void display()
	{
		MidPointEllipse(200, 150, 0, 0);
	}
	void main(int argc, char** argv)
	{
		glutInit(&argc, argv);
		glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
		glutInitWindowPosition(300,300);
		glutInitWindowSize(800, 600);
		glutCreateWindow("19012011094_MidPointEllipse_4.2");
		gluOrtho2D(-600, 600, -600, 600);
		glutDisplayFunc(display);
		glutMainLoop();
	}
}

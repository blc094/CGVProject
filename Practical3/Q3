// 3. Write a C/C++ program to draw a line using Bresenhamâ€™s line drawing algorithm.

#include "CGPracticals.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
namespace p33 {
	void setPixel(double x, double y)
	{
		glBegin(GL_POINTS);
		glVertex2d(x, y);
		glEnd();
	}
	void Bresenham(GLdouble X1, GLdouble Y1, GLdouble X2, GLdouble Y2)
	{
		GLdouble dx = X2 - X1, dy = Y2 - Y1, steps;
		float xInc, yInc, x = X1, y = Y1;
		steps = (fabs(dx) > fabs(dy) ? fabs(dx) : fabs(dy));
		xInc = dx / (float)steps;
		yInc = dy / (float)steps;
		setPixel(x, y);
		for (int k = 0; k < steps; k++)
		{
			x += xInc;
			y += yInc;
			setPixel(x, y);
		}
	}
	void display()
	{
		glClear(GL_COLOR_BUFFER_BIT);
		Bresenham(130, 130, 155, 230);
		Bresenham(130, 130, 230, 230);
		Bresenham(130, 130, 230, 155);
		Bresenham(130, 130, 230, 105);
		Bresenham(130, 130, 230, 30);
		Bresenham(130, 130, 155, 30);
		Bresenham(130, 130, 105, 30);
		Bresenham(130, 130, 30, 30);
		Bresenham(130, 130, 30, 105);
		Bresenham(130, 130, 30, 155);
		Bresenham(130, 130, 30, 230);
		Bresenham(130, 130, 105, 230);
		glFlush();
	}
	int width = 640;
	int height = 480;
	void Init()
	{
		glClearColor(0.0, 0.0, 0.0, 0);
		glColor3f(1.0, 1.0, 1.0);
		glViewport(0, 0, width, height);
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		gluOrtho2D(0, width, 0, height);
	}
	void main(int argc, char** argv)
	{
		glutInit(&argc, argv);
		glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
		glutInitWindowSize(width, height);
		glutInitWindowPosition(0, 0);
		glutCreateWindow("Bresenham Line 19012011094");
		Init();
		glutDisplayFunc(display);
		glutMainLoop();
	}
}
